Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt
Rule 3     stmt_list -> stmt_list stmt
Rule 4     stmt -> exp
Rule 5     stmt -> def_stmt
Rule 6     stmt -> print_stmt
Rule 7     print_stmt -> LPAREN PRINT_NUM exp RPAREN
Rule 8     print_stmt -> LPAREN PRINT_BOOL exp RPAREN
Rule 9     exp -> bool_val
Rule 10    exp -> number
Rule 11    exp -> VARIABLE
Rule 12    exp -> num_op
Rule 13    exp -> logical_op
Rule 14    exp -> fun_exp
Rule 15    exp -> fun_call
Rule 16    exp -> if_exp
Rule 17    bool_val -> TRUE
Rule 18    bool_val -> FALSE
Rule 19    number -> NUMBER
Rule 20    num_op -> LPAREN PLUS exp_list RPAREN
Rule 21    num_op -> LPAREN MINUS exp exp RPAREN
Rule 22    num_op -> LPAREN MULTIPLY exp_list RPAREN
Rule 23    num_op -> LPAREN DIVIDE exp exp RPAREN
Rule 24    num_op -> LPAREN MOD exp exp RPAREN
Rule 25    num_op -> LPAREN GREATER exp exp RPAREN
Rule 26    num_op -> LPAREN SMALLER exp exp RPAREN
Rule 27    num_op -> LPAREN EQUAL exp_list RPAREN
Rule 28    logical_op -> LPAREN AND exp_list RPAREN
Rule 29    logical_op -> LPAREN OR exp_list RPAREN
Rule 30    logical_op -> LPAREN NOT exp RPAREN
Rule 31    exp_list -> exp
Rule 32    exp_list -> exp_list exp
Rule 33    def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN
Rule 34    VARIABLE -> ID
Rule 35    fun_exp -> LPAREN FUN fun_ids fun_body RPAREN
Rule 36    fun_ids -> VARIABLE
Rule 37    fun_ids -> fun_ids VARIABLE
Rule 38    fun_ids -> empty
Rule 39    fun_body -> exp
Rule 40    fun_call -> LPAREN fun_exp param_list RPAREN
Rule 41    fun_call -> LPAREN fun_name param_list RPAREN
Rule 42    fun_name -> ID
Rule 43    param_list -> exp
Rule 44    param_list -> param_list exp
Rule 45    if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN
Rule 46    test_exp -> exp
Rule 47    then_exp -> exp
Rule 48    else_exp -> exp
Rule 49    empty -> <empty>

Terminals, with rules where they appear

AND                  : 28
DEFINE               : 33
DIVIDE               : 23
EQUAL                : 27
FALSE                : 18
FUN                  : 35
GREATER              : 25
ID                   : 34 42
IF                   : 45
LPAREN               : 7 8 20 21 22 23 24 25 26 27 28 29 30 33 35 40 41 45
MINUS                : 21
MOD                  : 24
MULTIPLY             : 22
NOT                  : 30
NUMBER               : 19
OR                   : 29
PLUS                 : 20
PRINT_BOOL           : 8
PRINT_NUM            : 7
RPAREN               : 7 8 20 21 22 23 24 25 26 27 28 29 30 33 35 40 41 45
SMALLER              : 26
TRUE                 : 17
error                : 

Nonterminals, with rules where they appear

VARIABLE             : 11 33 36 37
bool_val             : 9
def_stmt             : 5
else_exp             : 45
empty                : 38
exp                  : 4 7 8 21 21 23 23 24 24 25 25 26 26 30 31 32 33 39 43 44 46 47 48
exp_list             : 20 22 27 28 29 32
fun_body             : 35
fun_call             : 15
fun_exp              : 14 40
fun_ids              : 35 37
fun_name             : 41
if_exp               : 16
logical_op           : 13
num_op               : 12
number               : 10
param_list           : 40 41 44
print_stmt           : 6
program              : 0
stmt                 : 2 3
stmt_list            : 1 3
test_exp             : 45
then_exp             : 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt
    (3) stmt_list -> . stmt_list stmt
    (4) stmt -> . exp
    (5) stmt -> . def_stmt
    (6) stmt -> . print_stmt
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (33) def_stmt -> . LPAREN DEFINE VARIABLE exp RPAREN
    (7) print_stmt -> . LPAREN PRINT_NUM exp RPAREN
    (8) print_stmt -> . LPAREN PRINT_BOOL exp RPAREN
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    LPAREN          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    exp                            shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (3) stmt_list -> stmt_list . stmt
    (4) stmt -> . exp
    (5) stmt -> . def_stmt
    (6) stmt -> . print_stmt
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (33) def_stmt -> . LPAREN DEFINE VARIABLE exp RPAREN
    (7) print_stmt -> . LPAREN PRINT_NUM exp RPAREN
    (8) print_stmt -> . LPAREN PRINT_BOOL exp RPAREN
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    $end            reduce using rule 1 (program -> stmt_list .)
    LPAREN          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    exp                            shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 3

    (2) stmt_list -> stmt .

    LPAREN          reduce using rule 2 (stmt_list -> stmt .)
    TRUE            reduce using rule 2 (stmt_list -> stmt .)
    FALSE           reduce using rule 2 (stmt_list -> stmt .)
    NUMBER          reduce using rule 2 (stmt_list -> stmt .)
    ID              reduce using rule 2 (stmt_list -> stmt .)
    $end            reduce using rule 2 (stmt_list -> stmt .)


state 4

    (4) stmt -> exp .

    LPAREN          reduce using rule 4 (stmt -> exp .)
    TRUE            reduce using rule 4 (stmt -> exp .)
    FALSE           reduce using rule 4 (stmt -> exp .)
    NUMBER          reduce using rule 4 (stmt -> exp .)
    ID              reduce using rule 4 (stmt -> exp .)
    $end            reduce using rule 4 (stmt -> exp .)


state 5

    (5) stmt -> def_stmt .

    LPAREN          reduce using rule 5 (stmt -> def_stmt .)
    TRUE            reduce using rule 5 (stmt -> def_stmt .)
    FALSE           reduce using rule 5 (stmt -> def_stmt .)
    NUMBER          reduce using rule 5 (stmt -> def_stmt .)
    ID              reduce using rule 5 (stmt -> def_stmt .)
    $end            reduce using rule 5 (stmt -> def_stmt .)


state 6

    (6) stmt -> print_stmt .

    LPAREN          reduce using rule 6 (stmt -> print_stmt .)
    TRUE            reduce using rule 6 (stmt -> print_stmt .)
    FALSE           reduce using rule 6 (stmt -> print_stmt .)
    NUMBER          reduce using rule 6 (stmt -> print_stmt .)
    ID              reduce using rule 6 (stmt -> print_stmt .)
    $end            reduce using rule 6 (stmt -> print_stmt .)


state 7

    (9) exp -> bool_val .

    LPAREN          reduce using rule 9 (exp -> bool_val .)
    TRUE            reduce using rule 9 (exp -> bool_val .)
    FALSE           reduce using rule 9 (exp -> bool_val .)
    NUMBER          reduce using rule 9 (exp -> bool_val .)
    ID              reduce using rule 9 (exp -> bool_val .)
    $end            reduce using rule 9 (exp -> bool_val .)
    RPAREN          reduce using rule 9 (exp -> bool_val .)


state 8

    (10) exp -> number .

    LPAREN          reduce using rule 10 (exp -> number .)
    TRUE            reduce using rule 10 (exp -> number .)
    FALSE           reduce using rule 10 (exp -> number .)
    NUMBER          reduce using rule 10 (exp -> number .)
    ID              reduce using rule 10 (exp -> number .)
    $end            reduce using rule 10 (exp -> number .)
    RPAREN          reduce using rule 10 (exp -> number .)


state 9

    (11) exp -> VARIABLE .

    LPAREN          reduce using rule 11 (exp -> VARIABLE .)
    TRUE            reduce using rule 11 (exp -> VARIABLE .)
    FALSE           reduce using rule 11 (exp -> VARIABLE .)
    NUMBER          reduce using rule 11 (exp -> VARIABLE .)
    ID              reduce using rule 11 (exp -> VARIABLE .)
    $end            reduce using rule 11 (exp -> VARIABLE .)
    RPAREN          reduce using rule 11 (exp -> VARIABLE .)


state 10

    (12) exp -> num_op .

    LPAREN          reduce using rule 12 (exp -> num_op .)
    TRUE            reduce using rule 12 (exp -> num_op .)
    FALSE           reduce using rule 12 (exp -> num_op .)
    NUMBER          reduce using rule 12 (exp -> num_op .)
    ID              reduce using rule 12 (exp -> num_op .)
    $end            reduce using rule 12 (exp -> num_op .)
    RPAREN          reduce using rule 12 (exp -> num_op .)


state 11

    (13) exp -> logical_op .

    LPAREN          reduce using rule 13 (exp -> logical_op .)
    TRUE            reduce using rule 13 (exp -> logical_op .)
    FALSE           reduce using rule 13 (exp -> logical_op .)
    NUMBER          reduce using rule 13 (exp -> logical_op .)
    ID              reduce using rule 13 (exp -> logical_op .)
    $end            reduce using rule 13 (exp -> logical_op .)
    RPAREN          reduce using rule 13 (exp -> logical_op .)


state 12

    (14) exp -> fun_exp .

    LPAREN          reduce using rule 14 (exp -> fun_exp .)
    TRUE            reduce using rule 14 (exp -> fun_exp .)
    FALSE           reduce using rule 14 (exp -> fun_exp .)
    NUMBER          reduce using rule 14 (exp -> fun_exp .)
    ID              reduce using rule 14 (exp -> fun_exp .)
    $end            reduce using rule 14 (exp -> fun_exp .)
    RPAREN          reduce using rule 14 (exp -> fun_exp .)


state 13

    (15) exp -> fun_call .

    LPAREN          reduce using rule 15 (exp -> fun_call .)
    TRUE            reduce using rule 15 (exp -> fun_call .)
    FALSE           reduce using rule 15 (exp -> fun_call .)
    NUMBER          reduce using rule 15 (exp -> fun_call .)
    ID              reduce using rule 15 (exp -> fun_call .)
    $end            reduce using rule 15 (exp -> fun_call .)
    RPAREN          reduce using rule 15 (exp -> fun_call .)


state 14

    (16) exp -> if_exp .

    LPAREN          reduce using rule 16 (exp -> if_exp .)
    TRUE            reduce using rule 16 (exp -> if_exp .)
    FALSE           reduce using rule 16 (exp -> if_exp .)
    NUMBER          reduce using rule 16 (exp -> if_exp .)
    ID              reduce using rule 16 (exp -> if_exp .)
    $end            reduce using rule 16 (exp -> if_exp .)
    RPAREN          reduce using rule 16 (exp -> if_exp .)


state 15

    (33) def_stmt -> LPAREN . DEFINE VARIABLE exp RPAREN
    (7) print_stmt -> LPAREN . PRINT_NUM exp RPAREN
    (8) print_stmt -> LPAREN . PRINT_BOOL exp RPAREN
    (20) num_op -> LPAREN . PLUS exp_list RPAREN
    (21) num_op -> LPAREN . MINUS exp exp RPAREN
    (22) num_op -> LPAREN . MULTIPLY exp_list RPAREN
    (23) num_op -> LPAREN . DIVIDE exp exp RPAREN
    (24) num_op -> LPAREN . MOD exp exp RPAREN
    (25) num_op -> LPAREN . GREATER exp exp RPAREN
    (26) num_op -> LPAREN . SMALLER exp exp RPAREN
    (27) num_op -> LPAREN . EQUAL exp_list RPAREN
    (28) logical_op -> LPAREN . AND exp_list RPAREN
    (29) logical_op -> LPAREN . OR exp_list RPAREN
    (30) logical_op -> LPAREN . NOT exp RPAREN
    (35) fun_exp -> LPAREN . FUN fun_ids fun_body RPAREN
    (40) fun_call -> LPAREN . fun_exp param_list RPAREN
    (41) fun_call -> LPAREN . fun_name param_list RPAREN
    (45) if_exp -> LPAREN . IF test_exp then_exp else_exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (42) fun_name -> . ID

    DEFINE          shift and go to state 22
    PRINT_NUM       shift and go to state 23
    PRINT_BOOL      shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MOD             shift and go to state 29
    GREATER         shift and go to state 30
    SMALLER         shift and go to state 31
    EQUAL           shift and go to state 32
    AND             shift and go to state 33
    OR              shift and go to state 34
    NOT             shift and go to state 35
    FUN             shift and go to state 36
    IF              shift and go to state 39
    LPAREN          shift and go to state 21
    ID              shift and go to state 40

    fun_exp                        shift and go to state 37
    fun_name                       shift and go to state 38

state 16

    (17) bool_val -> TRUE .

    LPAREN          reduce using rule 17 (bool_val -> TRUE .)
    TRUE            reduce using rule 17 (bool_val -> TRUE .)
    FALSE           reduce using rule 17 (bool_val -> TRUE .)
    NUMBER          reduce using rule 17 (bool_val -> TRUE .)
    ID              reduce using rule 17 (bool_val -> TRUE .)
    $end            reduce using rule 17 (bool_val -> TRUE .)
    RPAREN          reduce using rule 17 (bool_val -> TRUE .)


state 17

    (18) bool_val -> FALSE .

    LPAREN          reduce using rule 18 (bool_val -> FALSE .)
    TRUE            reduce using rule 18 (bool_val -> FALSE .)
    FALSE           reduce using rule 18 (bool_val -> FALSE .)
    NUMBER          reduce using rule 18 (bool_val -> FALSE .)
    ID              reduce using rule 18 (bool_val -> FALSE .)
    $end            reduce using rule 18 (bool_val -> FALSE .)
    RPAREN          reduce using rule 18 (bool_val -> FALSE .)


state 18

    (19) number -> NUMBER .

    LPAREN          reduce using rule 19 (number -> NUMBER .)
    TRUE            reduce using rule 19 (number -> NUMBER .)
    FALSE           reduce using rule 19 (number -> NUMBER .)
    NUMBER          reduce using rule 19 (number -> NUMBER .)
    ID              reduce using rule 19 (number -> NUMBER .)
    $end            reduce using rule 19 (number -> NUMBER .)
    RPAREN          reduce using rule 19 (number -> NUMBER .)


state 19

    (34) VARIABLE -> ID .

    LPAREN          reduce using rule 34 (VARIABLE -> ID .)
    TRUE            reduce using rule 34 (VARIABLE -> ID .)
    FALSE           reduce using rule 34 (VARIABLE -> ID .)
    NUMBER          reduce using rule 34 (VARIABLE -> ID .)
    ID              reduce using rule 34 (VARIABLE -> ID .)
    $end            reduce using rule 34 (VARIABLE -> ID .)
    RPAREN          reduce using rule 34 (VARIABLE -> ID .)


state 20

    (3) stmt_list -> stmt_list stmt .

    LPAREN          reduce using rule 3 (stmt_list -> stmt_list stmt .)
    TRUE            reduce using rule 3 (stmt_list -> stmt_list stmt .)
    FALSE           reduce using rule 3 (stmt_list -> stmt_list stmt .)
    NUMBER          reduce using rule 3 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 3 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt_list stmt .)


state 21

    (35) fun_exp -> LPAREN . FUN fun_ids fun_body RPAREN

    FUN             shift and go to state 36


state 22

    (33) def_stmt -> LPAREN DEFINE . VARIABLE exp RPAREN
    (34) VARIABLE -> . ID

    ID              shift and go to state 19

    VARIABLE                       shift and go to state 41

state 23

    (7) print_stmt -> LPAREN PRINT_NUM . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 43
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 24

    (8) print_stmt -> LPAREN PRINT_BOOL . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 44
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 25

    (20) num_op -> LPAREN PLUS . exp_list RPAREN
    (31) exp_list -> . exp
    (32) exp_list -> . exp_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp_list                       shift and go to state 45
    exp                            shift and go to state 46
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 26

    (21) num_op -> LPAREN MINUS . exp exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 47
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 27

    (22) num_op -> LPAREN MULTIPLY . exp_list RPAREN
    (31) exp_list -> . exp
    (32) exp_list -> . exp_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp_list                       shift and go to state 48
    exp                            shift and go to state 46
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 28

    (23) num_op -> LPAREN DIVIDE . exp exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 49
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 29

    (24) num_op -> LPAREN MOD . exp exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 50
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 30

    (25) num_op -> LPAREN GREATER . exp exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 51
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 31

    (26) num_op -> LPAREN SMALLER . exp exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 52
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 32

    (27) num_op -> LPAREN EQUAL . exp_list RPAREN
    (31) exp_list -> . exp
    (32) exp_list -> . exp_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp_list                       shift and go to state 53
    exp                            shift and go to state 46
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 33

    (28) logical_op -> LPAREN AND . exp_list RPAREN
    (31) exp_list -> . exp
    (32) exp_list -> . exp_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp_list                       shift and go to state 54
    exp                            shift and go to state 46
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 34

    (29) logical_op -> LPAREN OR . exp_list RPAREN
    (31) exp_list -> . exp
    (32) exp_list -> . exp_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp_list                       shift and go to state 55
    exp                            shift and go to state 46
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 35

    (30) logical_op -> LPAREN NOT . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 56
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 36

    (35) fun_exp -> LPAREN FUN . fun_ids fun_body RPAREN
    (36) fun_ids -> . VARIABLE
    (37) fun_ids -> . fun_ids VARIABLE
    (38) fun_ids -> . empty
    (34) VARIABLE -> . ID
    (49) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 19
    TRUE            reduce using rule 49 (empty -> .)
    FALSE           reduce using rule 49 (empty -> .)
    NUMBER          reduce using rule 49 (empty -> .)
    LPAREN          reduce using rule 49 (empty -> .)

  ! ID              [ reduce using rule 49 (empty -> .) ]

    fun_ids                        shift and go to state 57
    VARIABLE                       shift and go to state 58
    empty                          shift and go to state 59

state 37

    (40) fun_call -> LPAREN fun_exp . param_list RPAREN
    (43) param_list -> . exp
    (44) param_list -> . param_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    fun_exp                        shift and go to state 12
    param_list                     shift and go to state 60
    exp                            shift and go to state 61
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 38

    (41) fun_call -> LPAREN fun_name . param_list RPAREN
    (43) param_list -> . exp
    (44) param_list -> . param_list exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    param_list                     shift and go to state 62
    exp                            shift and go to state 61
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 39

    (45) if_exp -> LPAREN IF . test_exp then_exp else_exp RPAREN
    (46) test_exp -> . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    test_exp                       shift and go to state 63
    exp                            shift and go to state 64
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 40

    (42) fun_name -> ID .

    TRUE            reduce using rule 42 (fun_name -> ID .)
    FALSE           reduce using rule 42 (fun_name -> ID .)
    NUMBER          reduce using rule 42 (fun_name -> ID .)
    ID              reduce using rule 42 (fun_name -> ID .)
    LPAREN          reduce using rule 42 (fun_name -> ID .)


state 41

    (33) def_stmt -> LPAREN DEFINE VARIABLE . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    VARIABLE                       shift and go to state 9
    exp                            shift and go to state 65
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 42

    (20) num_op -> LPAREN . PLUS exp_list RPAREN
    (21) num_op -> LPAREN . MINUS exp exp RPAREN
    (22) num_op -> LPAREN . MULTIPLY exp_list RPAREN
    (23) num_op -> LPAREN . DIVIDE exp exp RPAREN
    (24) num_op -> LPAREN . MOD exp exp RPAREN
    (25) num_op -> LPAREN . GREATER exp exp RPAREN
    (26) num_op -> LPAREN . SMALLER exp exp RPAREN
    (27) num_op -> LPAREN . EQUAL exp_list RPAREN
    (28) logical_op -> LPAREN . AND exp_list RPAREN
    (29) logical_op -> LPAREN . OR exp_list RPAREN
    (30) logical_op -> LPAREN . NOT exp RPAREN
    (35) fun_exp -> LPAREN . FUN fun_ids fun_body RPAREN
    (40) fun_call -> LPAREN . fun_exp param_list RPAREN
    (41) fun_call -> LPAREN . fun_name param_list RPAREN
    (45) if_exp -> LPAREN . IF test_exp then_exp else_exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (42) fun_name -> . ID

    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MULTIPLY        shift and go to state 27
    DIVIDE          shift and go to state 28
    MOD             shift and go to state 29
    GREATER         shift and go to state 30
    SMALLER         shift and go to state 31
    EQUAL           shift and go to state 32
    AND             shift and go to state 33
    OR              shift and go to state 34
    NOT             shift and go to state 35
    FUN             shift and go to state 36
    IF              shift and go to state 39
    LPAREN          shift and go to state 21
    ID              shift and go to state 40

    fun_exp                        shift and go to state 37
    fun_name                       shift and go to state 38

state 43

    (7) print_stmt -> LPAREN PRINT_NUM exp . RPAREN

    RPAREN          shift and go to state 66


state 44

    (8) print_stmt -> LPAREN PRINT_BOOL exp . RPAREN

    RPAREN          shift and go to state 67


state 45

    (20) num_op -> LPAREN PLUS exp_list . RPAREN
    (32) exp_list -> exp_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 68
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 69
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 46

    (31) exp_list -> exp .

    RPAREN          reduce using rule 31 (exp_list -> exp .)
    TRUE            reduce using rule 31 (exp_list -> exp .)
    FALSE           reduce using rule 31 (exp_list -> exp .)
    NUMBER          reduce using rule 31 (exp_list -> exp .)
    ID              reduce using rule 31 (exp_list -> exp .)
    LPAREN          reduce using rule 31 (exp_list -> exp .)


state 47

    (21) num_op -> LPAREN MINUS exp . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 70
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 48

    (22) num_op -> LPAREN MULTIPLY exp_list . RPAREN
    (32) exp_list -> exp_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 71
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 69
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 49

    (23) num_op -> LPAREN DIVIDE exp . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 72
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 50

    (24) num_op -> LPAREN MOD exp . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 73
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 51

    (25) num_op -> LPAREN GREATER exp . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 74
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 52

    (26) num_op -> LPAREN SMALLER exp . exp RPAREN
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 75
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 53

    (27) num_op -> LPAREN EQUAL exp_list . RPAREN
    (32) exp_list -> exp_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 76
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 69
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 54

    (28) logical_op -> LPAREN AND exp_list . RPAREN
    (32) exp_list -> exp_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 77
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 69
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 55

    (29) logical_op -> LPAREN OR exp_list . RPAREN
    (32) exp_list -> exp_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 78
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 69
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 56

    (30) logical_op -> LPAREN NOT exp . RPAREN

    RPAREN          shift and go to state 79


state 57

    (35) fun_exp -> LPAREN FUN fun_ids . fun_body RPAREN
    (37) fun_ids -> fun_ids . VARIABLE
    (39) fun_body -> . exp
    (34) VARIABLE -> . ID
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    ID              shift and go to state 19
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    LPAREN          shift and go to state 42

    fun_body                       shift and go to state 80
    VARIABLE                       shift and go to state 81
    exp                            shift and go to state 82
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 58

    (36) fun_ids -> VARIABLE .

    ID              reduce using rule 36 (fun_ids -> VARIABLE .)
    TRUE            reduce using rule 36 (fun_ids -> VARIABLE .)
    FALSE           reduce using rule 36 (fun_ids -> VARIABLE .)
    NUMBER          reduce using rule 36 (fun_ids -> VARIABLE .)
    LPAREN          reduce using rule 36 (fun_ids -> VARIABLE .)


state 59

    (38) fun_ids -> empty .

    ID              reduce using rule 38 (fun_ids -> empty .)
    TRUE            reduce using rule 38 (fun_ids -> empty .)
    FALSE           reduce using rule 38 (fun_ids -> empty .)
    NUMBER          reduce using rule 38 (fun_ids -> empty .)
    LPAREN          reduce using rule 38 (fun_ids -> empty .)


state 60

    (40) fun_call -> LPAREN fun_exp param_list . RPAREN
    (44) param_list -> param_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 83
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    fun_exp                        shift and go to state 12
    exp                            shift and go to state 84
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 61

    (43) param_list -> exp .

    RPAREN          reduce using rule 43 (param_list -> exp .)
    TRUE            reduce using rule 43 (param_list -> exp .)
    FALSE           reduce using rule 43 (param_list -> exp .)
    NUMBER          reduce using rule 43 (param_list -> exp .)
    ID              reduce using rule 43 (param_list -> exp .)
    LPAREN          reduce using rule 43 (param_list -> exp .)


state 62

    (41) fun_call -> LPAREN fun_name param_list . RPAREN
    (44) param_list -> param_list . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 85
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    exp                            shift and go to state 84
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 63

    (45) if_exp -> LPAREN IF test_exp . then_exp else_exp RPAREN
    (47) then_exp -> . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    then_exp                       shift and go to state 86
    exp                            shift and go to state 87
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 64

    (46) test_exp -> exp .

    TRUE            reduce using rule 46 (test_exp -> exp .)
    FALSE           reduce using rule 46 (test_exp -> exp .)
    NUMBER          reduce using rule 46 (test_exp -> exp .)
    ID              reduce using rule 46 (test_exp -> exp .)
    LPAREN          reduce using rule 46 (test_exp -> exp .)


state 65

    (33) def_stmt -> LPAREN DEFINE VARIABLE exp . RPAREN

    RPAREN          shift and go to state 88


state 66

    (7) print_stmt -> LPAREN PRINT_NUM exp RPAREN .

    LPAREN          reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    TRUE            reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    FALSE           reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    NUMBER          reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    ID              reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    $end            reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)


state 67

    (8) print_stmt -> LPAREN PRINT_BOOL exp RPAREN .

    LPAREN          reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    TRUE            reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    FALSE           reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    NUMBER          reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    ID              reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    $end            reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)


state 68

    (20) num_op -> LPAREN PLUS exp_list RPAREN .

    LPAREN          reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)
    TRUE            reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)
    FALSE           reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)
    NUMBER          reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)
    ID              reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)
    $end            reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)
    RPAREN          reduce using rule 20 (num_op -> LPAREN PLUS exp_list RPAREN .)


state 69

    (32) exp_list -> exp_list exp .

    RPAREN          reduce using rule 32 (exp_list -> exp_list exp .)
    TRUE            reduce using rule 32 (exp_list -> exp_list exp .)
    FALSE           reduce using rule 32 (exp_list -> exp_list exp .)
    NUMBER          reduce using rule 32 (exp_list -> exp_list exp .)
    ID              reduce using rule 32 (exp_list -> exp_list exp .)
    LPAREN          reduce using rule 32 (exp_list -> exp_list exp .)


state 70

    (21) num_op -> LPAREN MINUS exp exp . RPAREN

    RPAREN          shift and go to state 89


state 71

    (22) num_op -> LPAREN MULTIPLY exp_list RPAREN .

    LPAREN          reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    TRUE            reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    FALSE           reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    NUMBER          reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    ID              reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    $end            reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    RPAREN          reduce using rule 22 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)


state 72

    (23) num_op -> LPAREN DIVIDE exp exp . RPAREN

    RPAREN          shift and go to state 90


state 73

    (24) num_op -> LPAREN MOD exp exp . RPAREN

    RPAREN          shift and go to state 91


state 74

    (25) num_op -> LPAREN GREATER exp exp . RPAREN

    RPAREN          shift and go to state 92


state 75

    (26) num_op -> LPAREN SMALLER exp exp . RPAREN

    RPAREN          shift and go to state 93


state 76

    (27) num_op -> LPAREN EQUAL exp_list RPAREN .

    LPAREN          reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    TRUE            reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    FALSE           reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    NUMBER          reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    ID              reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    $end            reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    RPAREN          reduce using rule 27 (num_op -> LPAREN EQUAL exp_list RPAREN .)


state 77

    (28) logical_op -> LPAREN AND exp_list RPAREN .

    LPAREN          reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)
    TRUE            reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)
    FALSE           reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)
    NUMBER          reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)
    ID              reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)
    $end            reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)
    RPAREN          reduce using rule 28 (logical_op -> LPAREN AND exp_list RPAREN .)


state 78

    (29) logical_op -> LPAREN OR exp_list RPAREN .

    LPAREN          reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)
    TRUE            reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)
    FALSE           reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)
    NUMBER          reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)
    ID              reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)
    $end            reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)
    RPAREN          reduce using rule 29 (logical_op -> LPAREN OR exp_list RPAREN .)


state 79

    (30) logical_op -> LPAREN NOT exp RPAREN .

    LPAREN          reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)
    TRUE            reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)
    FALSE           reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)
    NUMBER          reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)
    ID              reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)
    $end            reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)
    RPAREN          reduce using rule 30 (logical_op -> LPAREN NOT exp RPAREN .)


state 80

    (35) fun_exp -> LPAREN FUN fun_ids fun_body . RPAREN

    RPAREN          shift and go to state 94


state 81

    (37) fun_ids -> fun_ids VARIABLE .
    (11) exp -> VARIABLE .

    ID              reduce using rule 37 (fun_ids -> fun_ids VARIABLE .)
    TRUE            reduce using rule 37 (fun_ids -> fun_ids VARIABLE .)
    FALSE           reduce using rule 37 (fun_ids -> fun_ids VARIABLE .)
    NUMBER          reduce using rule 37 (fun_ids -> fun_ids VARIABLE .)
    LPAREN          reduce using rule 37 (fun_ids -> fun_ids VARIABLE .)
    RPAREN          reduce using rule 11 (exp -> VARIABLE .)


state 82

    (39) fun_body -> exp .

    RPAREN          reduce using rule 39 (fun_body -> exp .)


state 83

    (40) fun_call -> LPAREN fun_exp param_list RPAREN .

    LPAREN          reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    TRUE            reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    FALSE           reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    NUMBER          reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    ID              reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    $end            reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    RPAREN          reduce using rule 40 (fun_call -> LPAREN fun_exp param_list RPAREN .)


state 84

    (44) param_list -> param_list exp .

    RPAREN          reduce using rule 44 (param_list -> param_list exp .)
    TRUE            reduce using rule 44 (param_list -> param_list exp .)
    FALSE           reduce using rule 44 (param_list -> param_list exp .)
    NUMBER          reduce using rule 44 (param_list -> param_list exp .)
    ID              reduce using rule 44 (param_list -> param_list exp .)
    LPAREN          reduce using rule 44 (param_list -> param_list exp .)


state 85

    (41) fun_call -> LPAREN fun_name param_list RPAREN .

    LPAREN          reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)
    TRUE            reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)
    FALSE           reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)
    NUMBER          reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)
    ID              reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)
    $end            reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)
    RPAREN          reduce using rule 41 (fun_call -> LPAREN fun_name param_list RPAREN .)


state 86

    (45) if_exp -> LPAREN IF test_exp then_exp . else_exp RPAREN
    (48) else_exp -> . exp
    (9) exp -> . bool_val
    (10) exp -> . number
    (11) exp -> . VARIABLE
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) bool_val -> . TRUE
    (18) bool_val -> . FALSE
    (19) number -> . NUMBER
    (34) VARIABLE -> . ID
    (20) num_op -> . LPAREN PLUS exp_list RPAREN
    (21) num_op -> . LPAREN MINUS exp exp RPAREN
    (22) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (23) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (24) num_op -> . LPAREN MOD exp exp RPAREN
    (25) num_op -> . LPAREN GREATER exp exp RPAREN
    (26) num_op -> . LPAREN SMALLER exp exp RPAREN
    (27) num_op -> . LPAREN EQUAL exp_list RPAREN
    (28) logical_op -> . LPAREN AND exp_list RPAREN
    (29) logical_op -> . LPAREN OR exp_list RPAREN
    (30) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN fun_ids fun_body RPAREN
    (40) fun_call -> . LPAREN fun_exp param_list RPAREN
    (41) fun_call -> . LPAREN fun_name param_list RPAREN
    (45) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 42

    else_exp                       shift and go to state 95
    exp                            shift and go to state 96
    bool_val                       shift and go to state 7
    number                         shift and go to state 8
    VARIABLE                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 87

    (47) then_exp -> exp .

    TRUE            reduce using rule 47 (then_exp -> exp .)
    FALSE           reduce using rule 47 (then_exp -> exp .)
    NUMBER          reduce using rule 47 (then_exp -> exp .)
    ID              reduce using rule 47 (then_exp -> exp .)
    LPAREN          reduce using rule 47 (then_exp -> exp .)


state 88

    (33) def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .

    LPAREN          reduce using rule 33 (def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .)
    TRUE            reduce using rule 33 (def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .)
    FALSE           reduce using rule 33 (def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .)
    NUMBER          reduce using rule 33 (def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .)
    ID              reduce using rule 33 (def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .)
    $end            reduce using rule 33 (def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN .)


state 89

    (21) num_op -> LPAREN MINUS exp exp RPAREN .

    LPAREN          reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)
    TRUE            reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)
    FALSE           reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)
    NUMBER          reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)
    ID              reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)
    $end            reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)
    RPAREN          reduce using rule 21 (num_op -> LPAREN MINUS exp exp RPAREN .)


state 90

    (23) num_op -> LPAREN DIVIDE exp exp RPAREN .

    LPAREN          reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    TRUE            reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    FALSE           reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    NUMBER          reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    ID              reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    $end            reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    RPAREN          reduce using rule 23 (num_op -> LPAREN DIVIDE exp exp RPAREN .)


state 91

    (24) num_op -> LPAREN MOD exp exp RPAREN .

    LPAREN          reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)
    TRUE            reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)
    FALSE           reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)
    NUMBER          reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)
    ID              reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)
    $end            reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)
    RPAREN          reduce using rule 24 (num_op -> LPAREN MOD exp exp RPAREN .)


state 92

    (25) num_op -> LPAREN GREATER exp exp RPAREN .

    LPAREN          reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)
    TRUE            reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)
    FALSE           reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)
    NUMBER          reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)
    ID              reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)
    $end            reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)
    RPAREN          reduce using rule 25 (num_op -> LPAREN GREATER exp exp RPAREN .)


state 93

    (26) num_op -> LPAREN SMALLER exp exp RPAREN .

    LPAREN          reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    TRUE            reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    FALSE           reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    NUMBER          reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    ID              reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    $end            reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    RPAREN          reduce using rule 26 (num_op -> LPAREN SMALLER exp exp RPAREN .)


state 94

    (35) fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .

    LPAREN          reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)
    TRUE            reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)
    FALSE           reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)
    NUMBER          reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)
    ID              reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)
    $end            reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)
    RPAREN          reduce using rule 35 (fun_exp -> LPAREN FUN fun_ids fun_body RPAREN .)


state 95

    (45) if_exp -> LPAREN IF test_exp then_exp else_exp . RPAREN

    RPAREN          shift and go to state 97


state 96

    (48) else_exp -> exp .

    RPAREN          reduce using rule 48 (else_exp -> exp .)


state 97

    (45) if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .

    LPAREN          reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    TRUE            reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    FALSE           reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    NUMBER          reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    ID              reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    $end            reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    RPAREN          reduce using rule 45 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
