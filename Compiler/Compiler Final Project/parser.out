Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    ILLEGAL
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt
Rule 3     stmt_list -> stmt_list stmt
Rule 4     stmt -> exp
Rule 5     stmt -> def_stmt
Rule 6     stmt -> print_stmt
Rule 7     print_stmt -> LPAREN PRINT_NUM exp RPAREN
Rule 8     print_stmt -> LPAREN PRINT_BOOL exp RPAREN
Rule 9     exp -> BOOL_VAL
Rule 10    exp -> number
Rule 11    exp -> variable
Rule 12    exp -> num_op
Rule 13    exp -> logical_op
Rule 14    exp -> fun_exp
Rule 15    exp -> fun_call
Rule 16    exp -> if_exp
Rule 17    number -> NUMBER
Rule 18    num_op -> LPAREN PLUS exp_list RPAREN
Rule 19    num_op -> LPAREN MINUS exp exp RPAREN
Rule 20    num_op -> LPAREN MULTIPLY exp_list RPAREN
Rule 21    num_op -> LPAREN DIVIDE exp exp RPAREN
Rule 22    num_op -> LPAREN MOD exp exp RPAREN
Rule 23    num_op -> LPAREN GREATER exp exp RPAREN
Rule 24    num_op -> LPAREN SMALLER exp exp RPAREN
Rule 25    num_op -> LPAREN EQUAL exp_list RPAREN
Rule 26    logical_op -> LPAREN AND exp_list RPAREN
Rule 27    logical_op -> LPAREN OR exp_list RPAREN
Rule 28    logical_op -> LPAREN NOT exp RPAREN
Rule 29    exp_list -> exp
Rule 30    exp_list -> exp_list exp
Rule 31    def_stmt -> LPAREN DEFINE ID exp RPAREN
Rule 32    variable -> ID
Rule 33    fun_call -> LPAREN fun_exp param_list RPAREN
Rule 34    fun_call -> LPAREN ID param_list RPAREN
Rule 35    fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
Rule 36    fun_ids -> ID
Rule 37    fun_ids -> fun_ids ID
Rule 38    fun_ids -> empty
Rule 39    fun_body -> exp
Rule 40    param_list -> exp
Rule 41    param_list -> param_list exp
Rule 42    param_list -> empty
Rule 43    if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN
Rule 44    test_exp -> exp
Rule 45    then_exp -> exp
Rule 46    else_exp -> exp
Rule 47    empty -> <empty>

Terminals, with rules where they appear

AND                  : 26
BOOL_VAL             : 9
DEFINE               : 31
DIVIDE               : 21
EQUAL                : 25
FALSE                : 
FUN                  : 35
GREATER              : 23
ID                   : 31 32 34 36 37
IF                   : 43
ILLEGAL              : 
LPAREN               : 7 8 18 19 20 21 22 23 24 25 26 27 28 31 33 34 35 35 43
MINUS                : 19
MOD                  : 22
MULTIPLY             : 20
NOT                  : 28
NUMBER               : 17
OR                   : 27
PLUS                 : 18
PRINT_BOOL           : 8
PRINT_NUM            : 7
RPAREN               : 7 8 18 19 20 21 22 23 24 25 26 27 28 31 33 34 35 35 43
SMALLER              : 24
TRUE                 : 
error                : 

Nonterminals, with rules where they appear

def_stmt             : 5
else_exp             : 43
empty                : 38 42
exp                  : 4 7 8 19 19 21 21 22 22 23 23 24 24 28 29 30 31 39 40 41 44 45 46
exp_list             : 18 20 25 26 27 30
fun_body             : 35
fun_call             : 15
fun_exp              : 14 33
fun_ids              : 35 37
if_exp               : 16
logical_op           : 13
num_op               : 12
number               : 10
param_list           : 33 34 41
print_stmt           : 6
program              : 0
stmt                 : 2 3
stmt_list            : 1 3
test_exp             : 43
then_exp             : 43
variable             : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt
    (3) stmt_list -> . stmt_list stmt
    (4) stmt -> . exp
    (5) stmt -> . def_stmt
    (6) stmt -> . print_stmt
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (31) def_stmt -> . LPAREN DEFINE ID exp RPAREN
    (7) print_stmt -> . LPAREN PRINT_NUM exp RPAREN
    (8) print_stmt -> . LPAREN PRINT_BOOL exp RPAREN
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    ID              shift and go to state 16

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    exp                            shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (3) stmt_list -> stmt_list . stmt
    (4) stmt -> . exp
    (5) stmt -> . def_stmt
    (6) stmt -> . print_stmt
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (31) def_stmt -> . LPAREN DEFINE ID exp RPAREN
    (7) print_stmt -> . LPAREN PRINT_NUM exp RPAREN
    (8) print_stmt -> . LPAREN PRINT_BOOL exp RPAREN
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    $end            reduce using rule 1 (program -> stmt_list .)
    BOOL_VAL        shift and go to state 7
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    ID              shift and go to state 16

    stmt                           shift and go to state 18
    exp                            shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 3

    (2) stmt_list -> stmt .

    BOOL_VAL        reduce using rule 2 (stmt_list -> stmt .)
    LPAREN          reduce using rule 2 (stmt_list -> stmt .)
    NUMBER          reduce using rule 2 (stmt_list -> stmt .)
    ID              reduce using rule 2 (stmt_list -> stmt .)
    $end            reduce using rule 2 (stmt_list -> stmt .)


state 4

    (4) stmt -> exp .

    BOOL_VAL        reduce using rule 4 (stmt -> exp .)
    LPAREN          reduce using rule 4 (stmt -> exp .)
    NUMBER          reduce using rule 4 (stmt -> exp .)
    ID              reduce using rule 4 (stmt -> exp .)
    $end            reduce using rule 4 (stmt -> exp .)


state 5

    (5) stmt -> def_stmt .

    BOOL_VAL        reduce using rule 5 (stmt -> def_stmt .)
    LPAREN          reduce using rule 5 (stmt -> def_stmt .)
    NUMBER          reduce using rule 5 (stmt -> def_stmt .)
    ID              reduce using rule 5 (stmt -> def_stmt .)
    $end            reduce using rule 5 (stmt -> def_stmt .)


state 6

    (6) stmt -> print_stmt .

    BOOL_VAL        reduce using rule 6 (stmt -> print_stmt .)
    LPAREN          reduce using rule 6 (stmt -> print_stmt .)
    NUMBER          reduce using rule 6 (stmt -> print_stmt .)
    ID              reduce using rule 6 (stmt -> print_stmt .)
    $end            reduce using rule 6 (stmt -> print_stmt .)


state 7

    (9) exp -> BOOL_VAL .

    BOOL_VAL        reduce using rule 9 (exp -> BOOL_VAL .)
    LPAREN          reduce using rule 9 (exp -> BOOL_VAL .)
    NUMBER          reduce using rule 9 (exp -> BOOL_VAL .)
    ID              reduce using rule 9 (exp -> BOOL_VAL .)
    $end            reduce using rule 9 (exp -> BOOL_VAL .)
    RPAREN          reduce using rule 9 (exp -> BOOL_VAL .)


state 8

    (10) exp -> number .

    BOOL_VAL        reduce using rule 10 (exp -> number .)
    LPAREN          reduce using rule 10 (exp -> number .)
    NUMBER          reduce using rule 10 (exp -> number .)
    ID              reduce using rule 10 (exp -> number .)
    $end            reduce using rule 10 (exp -> number .)
    RPAREN          reduce using rule 10 (exp -> number .)


state 9

    (11) exp -> variable .

    BOOL_VAL        reduce using rule 11 (exp -> variable .)
    LPAREN          reduce using rule 11 (exp -> variable .)
    NUMBER          reduce using rule 11 (exp -> variable .)
    ID              reduce using rule 11 (exp -> variable .)
    $end            reduce using rule 11 (exp -> variable .)
    RPAREN          reduce using rule 11 (exp -> variable .)


state 10

    (12) exp -> num_op .

    BOOL_VAL        reduce using rule 12 (exp -> num_op .)
    LPAREN          reduce using rule 12 (exp -> num_op .)
    NUMBER          reduce using rule 12 (exp -> num_op .)
    ID              reduce using rule 12 (exp -> num_op .)
    $end            reduce using rule 12 (exp -> num_op .)
    RPAREN          reduce using rule 12 (exp -> num_op .)


state 11

    (13) exp -> logical_op .

    BOOL_VAL        reduce using rule 13 (exp -> logical_op .)
    LPAREN          reduce using rule 13 (exp -> logical_op .)
    NUMBER          reduce using rule 13 (exp -> logical_op .)
    ID              reduce using rule 13 (exp -> logical_op .)
    $end            reduce using rule 13 (exp -> logical_op .)
    RPAREN          reduce using rule 13 (exp -> logical_op .)


state 12

    (14) exp -> fun_exp .

    BOOL_VAL        reduce using rule 14 (exp -> fun_exp .)
    LPAREN          reduce using rule 14 (exp -> fun_exp .)
    NUMBER          reduce using rule 14 (exp -> fun_exp .)
    ID              reduce using rule 14 (exp -> fun_exp .)
    $end            reduce using rule 14 (exp -> fun_exp .)
    RPAREN          reduce using rule 14 (exp -> fun_exp .)


state 13

    (15) exp -> fun_call .

    BOOL_VAL        reduce using rule 15 (exp -> fun_call .)
    LPAREN          reduce using rule 15 (exp -> fun_call .)
    NUMBER          reduce using rule 15 (exp -> fun_call .)
    ID              reduce using rule 15 (exp -> fun_call .)
    $end            reduce using rule 15 (exp -> fun_call .)
    RPAREN          reduce using rule 15 (exp -> fun_call .)


state 14

    (16) exp -> if_exp .

    BOOL_VAL        reduce using rule 16 (exp -> if_exp .)
    LPAREN          reduce using rule 16 (exp -> if_exp .)
    NUMBER          reduce using rule 16 (exp -> if_exp .)
    ID              reduce using rule 16 (exp -> if_exp .)
    $end            reduce using rule 16 (exp -> if_exp .)
    RPAREN          reduce using rule 16 (exp -> if_exp .)


state 15

    (31) def_stmt -> LPAREN . DEFINE ID exp RPAREN
    (7) print_stmt -> LPAREN . PRINT_NUM exp RPAREN
    (8) print_stmt -> LPAREN . PRINT_BOOL exp RPAREN
    (18) num_op -> LPAREN . PLUS exp_list RPAREN
    (19) num_op -> LPAREN . MINUS exp exp RPAREN
    (20) num_op -> LPAREN . MULTIPLY exp_list RPAREN
    (21) num_op -> LPAREN . DIVIDE exp exp RPAREN
    (22) num_op -> LPAREN . MOD exp exp RPAREN
    (23) num_op -> LPAREN . GREATER exp exp RPAREN
    (24) num_op -> LPAREN . SMALLER exp exp RPAREN
    (25) num_op -> LPAREN . EQUAL exp_list RPAREN
    (26) logical_op -> LPAREN . AND exp_list RPAREN
    (27) logical_op -> LPAREN . OR exp_list RPAREN
    (28) logical_op -> LPAREN . NOT exp RPAREN
    (35) fun_exp -> LPAREN . FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> LPAREN . fun_exp param_list RPAREN
    (34) fun_call -> LPAREN . ID param_list RPAREN
    (43) if_exp -> LPAREN . IF test_exp then_exp else_exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN

    DEFINE          shift and go to state 20
    PRINT_NUM       shift and go to state 22
    PRINT_BOOL      shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MOD             shift and go to state 28
    GREATER         shift and go to state 29
    SMALLER         shift and go to state 30
    EQUAL           shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    NOT             shift and go to state 34
    FUN             shift and go to state 35
    ID              shift and go to state 21
    IF              shift and go to state 37
    LPAREN          shift and go to state 19

    fun_exp                        shift and go to state 36

state 16

    (32) variable -> ID .

    BOOL_VAL        reduce using rule 32 (variable -> ID .)
    LPAREN          reduce using rule 32 (variable -> ID .)
    NUMBER          reduce using rule 32 (variable -> ID .)
    ID              reduce using rule 32 (variable -> ID .)
    $end            reduce using rule 32 (variable -> ID .)
    RPAREN          reduce using rule 32 (variable -> ID .)


state 17

    (17) number -> NUMBER .

    BOOL_VAL        reduce using rule 17 (number -> NUMBER .)
    LPAREN          reduce using rule 17 (number -> NUMBER .)
    NUMBER          reduce using rule 17 (number -> NUMBER .)
    ID              reduce using rule 17 (number -> NUMBER .)
    $end            reduce using rule 17 (number -> NUMBER .)
    RPAREN          reduce using rule 17 (number -> NUMBER .)


state 18

    (3) stmt_list -> stmt_list stmt .

    BOOL_VAL        reduce using rule 3 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 3 (stmt_list -> stmt_list stmt .)
    NUMBER          reduce using rule 3 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 3 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt_list stmt .)


state 19

    (35) fun_exp -> LPAREN . FUN LPAREN fun_ids RPAREN fun_body RPAREN

    FUN             shift and go to state 35


state 20

    (31) def_stmt -> LPAREN DEFINE . ID exp RPAREN

    ID              shift and go to state 38


state 21

    (34) fun_call -> LPAREN ID . param_list RPAREN
    (40) param_list -> . exp
    (41) param_list -> . param_list exp
    (42) param_list -> . empty
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (47) empty -> .
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

  ! shift/reduce conflict for BOOL_VAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    BOOL_VAL        shift and go to state 7
    RPAREN          reduce using rule 47 (empty -> .)
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

  ! BOOL_VAL        [ reduce using rule 47 (empty -> .) ]
  ! NUMBER          [ reduce using rule 47 (empty -> .) ]
  ! ID              [ reduce using rule 47 (empty -> .) ]
  ! LPAREN          [ reduce using rule 47 (empty -> .) ]

    param_list                     shift and go to state 40
    exp                            shift and go to state 41
    empty                          shift and go to state 42
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 22

    (7) print_stmt -> LPAREN PRINT_NUM . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 43
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 23

    (8) print_stmt -> LPAREN PRINT_BOOL . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 44
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 24

    (18) num_op -> LPAREN PLUS . exp_list RPAREN
    (29) exp_list -> . exp
    (30) exp_list -> . exp_list exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp_list                       shift and go to state 45
    exp                            shift and go to state 46
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 25

    (19) num_op -> LPAREN MINUS . exp exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 47
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 26

    (20) num_op -> LPAREN MULTIPLY . exp_list RPAREN
    (29) exp_list -> . exp
    (30) exp_list -> . exp_list exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp_list                       shift and go to state 48
    exp                            shift and go to state 46
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 27

    (21) num_op -> LPAREN DIVIDE . exp exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 49
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 28

    (22) num_op -> LPAREN MOD . exp exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 50
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 29

    (23) num_op -> LPAREN GREATER . exp exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 51
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 30

    (24) num_op -> LPAREN SMALLER . exp exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 52
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 31

    (25) num_op -> LPAREN EQUAL . exp_list RPAREN
    (29) exp_list -> . exp
    (30) exp_list -> . exp_list exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp_list                       shift and go to state 53
    exp                            shift and go to state 46
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 32

    (26) logical_op -> LPAREN AND . exp_list RPAREN
    (29) exp_list -> . exp
    (30) exp_list -> . exp_list exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp_list                       shift and go to state 54
    exp                            shift and go to state 46
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 33

    (27) logical_op -> LPAREN OR . exp_list RPAREN
    (29) exp_list -> . exp
    (30) exp_list -> . exp_list exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp_list                       shift and go to state 55
    exp                            shift and go to state 46
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 34

    (28) logical_op -> LPAREN NOT . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 56
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 35

    (35) fun_exp -> LPAREN FUN . LPAREN fun_ids RPAREN fun_body RPAREN

    LPAREN          shift and go to state 57


state 36

    (33) fun_call -> LPAREN fun_exp . param_list RPAREN
    (40) param_list -> . exp
    (41) param_list -> . param_list exp
    (42) param_list -> . empty
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (47) empty -> .
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

  ! shift/reduce conflict for BOOL_VAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    BOOL_VAL        shift and go to state 7
    RPAREN          reduce using rule 47 (empty -> .)
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

  ! BOOL_VAL        [ reduce using rule 47 (empty -> .) ]
  ! NUMBER          [ reduce using rule 47 (empty -> .) ]
  ! ID              [ reduce using rule 47 (empty -> .) ]
  ! LPAREN          [ reduce using rule 47 (empty -> .) ]

    fun_exp                        shift and go to state 12
    param_list                     shift and go to state 58
    exp                            shift and go to state 41
    empty                          shift and go to state 42
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 37

    (43) if_exp -> LPAREN IF . test_exp then_exp else_exp RPAREN
    (44) test_exp -> . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    test_exp                       shift and go to state 59
    exp                            shift and go to state 60
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 38

    (31) def_stmt -> LPAREN DEFINE ID . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 61
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 39

    (18) num_op -> LPAREN . PLUS exp_list RPAREN
    (19) num_op -> LPAREN . MINUS exp exp RPAREN
    (20) num_op -> LPAREN . MULTIPLY exp_list RPAREN
    (21) num_op -> LPAREN . DIVIDE exp exp RPAREN
    (22) num_op -> LPAREN . MOD exp exp RPAREN
    (23) num_op -> LPAREN . GREATER exp exp RPAREN
    (24) num_op -> LPAREN . SMALLER exp exp RPAREN
    (25) num_op -> LPAREN . EQUAL exp_list RPAREN
    (26) logical_op -> LPAREN . AND exp_list RPAREN
    (27) logical_op -> LPAREN . OR exp_list RPAREN
    (28) logical_op -> LPAREN . NOT exp RPAREN
    (35) fun_exp -> LPAREN . FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> LPAREN . fun_exp param_list RPAREN
    (34) fun_call -> LPAREN . ID param_list RPAREN
    (43) if_exp -> LPAREN . IF test_exp then_exp else_exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN

    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    MULTIPLY        shift and go to state 26
    DIVIDE          shift and go to state 27
    MOD             shift and go to state 28
    GREATER         shift and go to state 29
    SMALLER         shift and go to state 30
    EQUAL           shift and go to state 31
    AND             shift and go to state 32
    OR              shift and go to state 33
    NOT             shift and go to state 34
    FUN             shift and go to state 35
    ID              shift and go to state 21
    IF              shift and go to state 37
    LPAREN          shift and go to state 19

    fun_exp                        shift and go to state 36

state 40

    (34) fun_call -> LPAREN ID param_list . RPAREN
    (41) param_list -> param_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 62
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 63
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 41

    (40) param_list -> exp .

    RPAREN          reduce using rule 40 (param_list -> exp .)
    BOOL_VAL        reduce using rule 40 (param_list -> exp .)
    NUMBER          reduce using rule 40 (param_list -> exp .)
    ID              reduce using rule 40 (param_list -> exp .)
    LPAREN          reduce using rule 40 (param_list -> exp .)


state 42

    (42) param_list -> empty .

    RPAREN          reduce using rule 42 (param_list -> empty .)
    BOOL_VAL        reduce using rule 42 (param_list -> empty .)
    NUMBER          reduce using rule 42 (param_list -> empty .)
    ID              reduce using rule 42 (param_list -> empty .)
    LPAREN          reduce using rule 42 (param_list -> empty .)


state 43

    (7) print_stmt -> LPAREN PRINT_NUM exp . RPAREN

    RPAREN          shift and go to state 64


state 44

    (8) print_stmt -> LPAREN PRINT_BOOL exp . RPAREN

    RPAREN          shift and go to state 65


state 45

    (18) num_op -> LPAREN PLUS exp_list . RPAREN
    (30) exp_list -> exp_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 66
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 67
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 46

    (29) exp_list -> exp .

    RPAREN          reduce using rule 29 (exp_list -> exp .)
    BOOL_VAL        reduce using rule 29 (exp_list -> exp .)
    NUMBER          reduce using rule 29 (exp_list -> exp .)
    ID              reduce using rule 29 (exp_list -> exp .)
    LPAREN          reduce using rule 29 (exp_list -> exp .)


state 47

    (19) num_op -> LPAREN MINUS exp . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 68
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 48

    (20) num_op -> LPAREN MULTIPLY exp_list . RPAREN
    (30) exp_list -> exp_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 69
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 67
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 49

    (21) num_op -> LPAREN DIVIDE exp . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 70
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 50

    (22) num_op -> LPAREN MOD exp . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 71
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 51

    (23) num_op -> LPAREN GREATER exp . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 72
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 52

    (24) num_op -> LPAREN SMALLER exp . exp RPAREN
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 73
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 53

    (25) num_op -> LPAREN EQUAL exp_list . RPAREN
    (30) exp_list -> exp_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 74
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 67
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 54

    (26) logical_op -> LPAREN AND exp_list . RPAREN
    (30) exp_list -> exp_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 75
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 67
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 55

    (27) logical_op -> LPAREN OR exp_list . RPAREN
    (30) exp_list -> exp_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 76
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    exp                            shift and go to state 67
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 56

    (28) logical_op -> LPAREN NOT exp . RPAREN

    RPAREN          shift and go to state 77


state 57

    (35) fun_exp -> LPAREN FUN LPAREN . fun_ids RPAREN fun_body RPAREN
    (36) fun_ids -> . ID
    (37) fun_ids -> . fun_ids ID
    (38) fun_ids -> . empty
    (47) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 79
    RPAREN          reduce using rule 47 (empty -> .)

  ! ID              [ reduce using rule 47 (empty -> .) ]

    fun_ids                        shift and go to state 78
    empty                          shift and go to state 80

state 58

    (33) fun_call -> LPAREN fun_exp param_list . RPAREN
    (41) param_list -> param_list . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    RPAREN          shift and go to state 81
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    fun_exp                        shift and go to state 12
    exp                            shift and go to state 63
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 59

    (43) if_exp -> LPAREN IF test_exp . then_exp else_exp RPAREN
    (45) then_exp -> . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    then_exp                       shift and go to state 82
    exp                            shift and go to state 83
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 60

    (44) test_exp -> exp .

    BOOL_VAL        reduce using rule 44 (test_exp -> exp .)
    NUMBER          reduce using rule 44 (test_exp -> exp .)
    ID              reduce using rule 44 (test_exp -> exp .)
    LPAREN          reduce using rule 44 (test_exp -> exp .)


state 61

    (31) def_stmt -> LPAREN DEFINE ID exp . RPAREN

    RPAREN          shift and go to state 84


state 62

    (34) fun_call -> LPAREN ID param_list RPAREN .

    BOOL_VAL        reduce using rule 34 (fun_call -> LPAREN ID param_list RPAREN .)
    LPAREN          reduce using rule 34 (fun_call -> LPAREN ID param_list RPAREN .)
    NUMBER          reduce using rule 34 (fun_call -> LPAREN ID param_list RPAREN .)
    ID              reduce using rule 34 (fun_call -> LPAREN ID param_list RPAREN .)
    $end            reduce using rule 34 (fun_call -> LPAREN ID param_list RPAREN .)
    RPAREN          reduce using rule 34 (fun_call -> LPAREN ID param_list RPAREN .)


state 63

    (41) param_list -> param_list exp .

    RPAREN          reduce using rule 41 (param_list -> param_list exp .)
    BOOL_VAL        reduce using rule 41 (param_list -> param_list exp .)
    NUMBER          reduce using rule 41 (param_list -> param_list exp .)
    ID              reduce using rule 41 (param_list -> param_list exp .)
    LPAREN          reduce using rule 41 (param_list -> param_list exp .)


state 64

    (7) print_stmt -> LPAREN PRINT_NUM exp RPAREN .

    BOOL_VAL        reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    LPAREN          reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    NUMBER          reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    ID              reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)
    $end            reduce using rule 7 (print_stmt -> LPAREN PRINT_NUM exp RPAREN .)


state 65

    (8) print_stmt -> LPAREN PRINT_BOOL exp RPAREN .

    BOOL_VAL        reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    LPAREN          reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    NUMBER          reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    ID              reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)
    $end            reduce using rule 8 (print_stmt -> LPAREN PRINT_BOOL exp RPAREN .)


state 66

    (18) num_op -> LPAREN PLUS exp_list RPAREN .

    BOOL_VAL        reduce using rule 18 (num_op -> LPAREN PLUS exp_list RPAREN .)
    LPAREN          reduce using rule 18 (num_op -> LPAREN PLUS exp_list RPAREN .)
    NUMBER          reduce using rule 18 (num_op -> LPAREN PLUS exp_list RPAREN .)
    ID              reduce using rule 18 (num_op -> LPAREN PLUS exp_list RPAREN .)
    $end            reduce using rule 18 (num_op -> LPAREN PLUS exp_list RPAREN .)
    RPAREN          reduce using rule 18 (num_op -> LPAREN PLUS exp_list RPAREN .)


state 67

    (30) exp_list -> exp_list exp .

    RPAREN          reduce using rule 30 (exp_list -> exp_list exp .)
    BOOL_VAL        reduce using rule 30 (exp_list -> exp_list exp .)
    NUMBER          reduce using rule 30 (exp_list -> exp_list exp .)
    ID              reduce using rule 30 (exp_list -> exp_list exp .)
    LPAREN          reduce using rule 30 (exp_list -> exp_list exp .)


state 68

    (19) num_op -> LPAREN MINUS exp exp . RPAREN

    RPAREN          shift and go to state 85


state 69

    (20) num_op -> LPAREN MULTIPLY exp_list RPAREN .

    BOOL_VAL        reduce using rule 20 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    LPAREN          reduce using rule 20 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    NUMBER          reduce using rule 20 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    ID              reduce using rule 20 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    $end            reduce using rule 20 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)
    RPAREN          reduce using rule 20 (num_op -> LPAREN MULTIPLY exp_list RPAREN .)


state 70

    (21) num_op -> LPAREN DIVIDE exp exp . RPAREN

    RPAREN          shift and go to state 86


state 71

    (22) num_op -> LPAREN MOD exp exp . RPAREN

    RPAREN          shift and go to state 87


state 72

    (23) num_op -> LPAREN GREATER exp exp . RPAREN

    RPAREN          shift and go to state 88


state 73

    (24) num_op -> LPAREN SMALLER exp exp . RPAREN

    RPAREN          shift and go to state 89


state 74

    (25) num_op -> LPAREN EQUAL exp_list RPAREN .

    BOOL_VAL        reduce using rule 25 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    LPAREN          reduce using rule 25 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    NUMBER          reduce using rule 25 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    ID              reduce using rule 25 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    $end            reduce using rule 25 (num_op -> LPAREN EQUAL exp_list RPAREN .)
    RPAREN          reduce using rule 25 (num_op -> LPAREN EQUAL exp_list RPAREN .)


state 75

    (26) logical_op -> LPAREN AND exp_list RPAREN .

    BOOL_VAL        reduce using rule 26 (logical_op -> LPAREN AND exp_list RPAREN .)
    LPAREN          reduce using rule 26 (logical_op -> LPAREN AND exp_list RPAREN .)
    NUMBER          reduce using rule 26 (logical_op -> LPAREN AND exp_list RPAREN .)
    ID              reduce using rule 26 (logical_op -> LPAREN AND exp_list RPAREN .)
    $end            reduce using rule 26 (logical_op -> LPAREN AND exp_list RPAREN .)
    RPAREN          reduce using rule 26 (logical_op -> LPAREN AND exp_list RPAREN .)


state 76

    (27) logical_op -> LPAREN OR exp_list RPAREN .

    BOOL_VAL        reduce using rule 27 (logical_op -> LPAREN OR exp_list RPAREN .)
    LPAREN          reduce using rule 27 (logical_op -> LPAREN OR exp_list RPAREN .)
    NUMBER          reduce using rule 27 (logical_op -> LPAREN OR exp_list RPAREN .)
    ID              reduce using rule 27 (logical_op -> LPAREN OR exp_list RPAREN .)
    $end            reduce using rule 27 (logical_op -> LPAREN OR exp_list RPAREN .)
    RPAREN          reduce using rule 27 (logical_op -> LPAREN OR exp_list RPAREN .)


state 77

    (28) logical_op -> LPAREN NOT exp RPAREN .

    BOOL_VAL        reduce using rule 28 (logical_op -> LPAREN NOT exp RPAREN .)
    LPAREN          reduce using rule 28 (logical_op -> LPAREN NOT exp RPAREN .)
    NUMBER          reduce using rule 28 (logical_op -> LPAREN NOT exp RPAREN .)
    ID              reduce using rule 28 (logical_op -> LPAREN NOT exp RPAREN .)
    $end            reduce using rule 28 (logical_op -> LPAREN NOT exp RPAREN .)
    RPAREN          reduce using rule 28 (logical_op -> LPAREN NOT exp RPAREN .)


state 78

    (35) fun_exp -> LPAREN FUN LPAREN fun_ids . RPAREN fun_body RPAREN
    (37) fun_ids -> fun_ids . ID

    RPAREN          shift and go to state 90
    ID              shift and go to state 91


state 79

    (36) fun_ids -> ID .

    RPAREN          reduce using rule 36 (fun_ids -> ID .)
    ID              reduce using rule 36 (fun_ids -> ID .)


state 80

    (38) fun_ids -> empty .

    RPAREN          reduce using rule 38 (fun_ids -> empty .)
    ID              reduce using rule 38 (fun_ids -> empty .)


state 81

    (33) fun_call -> LPAREN fun_exp param_list RPAREN .

    BOOL_VAL        reduce using rule 33 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    LPAREN          reduce using rule 33 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    NUMBER          reduce using rule 33 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    ID              reduce using rule 33 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    $end            reduce using rule 33 (fun_call -> LPAREN fun_exp param_list RPAREN .)
    RPAREN          reduce using rule 33 (fun_call -> LPAREN fun_exp param_list RPAREN .)


state 82

    (43) if_exp -> LPAREN IF test_exp then_exp . else_exp RPAREN
    (46) else_exp -> . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    else_exp                       shift and go to state 92
    exp                            shift and go to state 93
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 83

    (45) then_exp -> exp .

    BOOL_VAL        reduce using rule 45 (then_exp -> exp .)
    NUMBER          reduce using rule 45 (then_exp -> exp .)
    ID              reduce using rule 45 (then_exp -> exp .)
    LPAREN          reduce using rule 45 (then_exp -> exp .)


state 84

    (31) def_stmt -> LPAREN DEFINE ID exp RPAREN .

    BOOL_VAL        reduce using rule 31 (def_stmt -> LPAREN DEFINE ID exp RPAREN .)
    LPAREN          reduce using rule 31 (def_stmt -> LPAREN DEFINE ID exp RPAREN .)
    NUMBER          reduce using rule 31 (def_stmt -> LPAREN DEFINE ID exp RPAREN .)
    ID              reduce using rule 31 (def_stmt -> LPAREN DEFINE ID exp RPAREN .)
    $end            reduce using rule 31 (def_stmt -> LPAREN DEFINE ID exp RPAREN .)


state 85

    (19) num_op -> LPAREN MINUS exp exp RPAREN .

    BOOL_VAL        reduce using rule 19 (num_op -> LPAREN MINUS exp exp RPAREN .)
    LPAREN          reduce using rule 19 (num_op -> LPAREN MINUS exp exp RPAREN .)
    NUMBER          reduce using rule 19 (num_op -> LPAREN MINUS exp exp RPAREN .)
    ID              reduce using rule 19 (num_op -> LPAREN MINUS exp exp RPAREN .)
    $end            reduce using rule 19 (num_op -> LPAREN MINUS exp exp RPAREN .)
    RPAREN          reduce using rule 19 (num_op -> LPAREN MINUS exp exp RPAREN .)


state 86

    (21) num_op -> LPAREN DIVIDE exp exp RPAREN .

    BOOL_VAL        reduce using rule 21 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    LPAREN          reduce using rule 21 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    NUMBER          reduce using rule 21 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    ID              reduce using rule 21 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    $end            reduce using rule 21 (num_op -> LPAREN DIVIDE exp exp RPAREN .)
    RPAREN          reduce using rule 21 (num_op -> LPAREN DIVIDE exp exp RPAREN .)


state 87

    (22) num_op -> LPAREN MOD exp exp RPAREN .

    BOOL_VAL        reduce using rule 22 (num_op -> LPAREN MOD exp exp RPAREN .)
    LPAREN          reduce using rule 22 (num_op -> LPAREN MOD exp exp RPAREN .)
    NUMBER          reduce using rule 22 (num_op -> LPAREN MOD exp exp RPAREN .)
    ID              reduce using rule 22 (num_op -> LPAREN MOD exp exp RPAREN .)
    $end            reduce using rule 22 (num_op -> LPAREN MOD exp exp RPAREN .)
    RPAREN          reduce using rule 22 (num_op -> LPAREN MOD exp exp RPAREN .)


state 88

    (23) num_op -> LPAREN GREATER exp exp RPAREN .

    BOOL_VAL        reduce using rule 23 (num_op -> LPAREN GREATER exp exp RPAREN .)
    LPAREN          reduce using rule 23 (num_op -> LPAREN GREATER exp exp RPAREN .)
    NUMBER          reduce using rule 23 (num_op -> LPAREN GREATER exp exp RPAREN .)
    ID              reduce using rule 23 (num_op -> LPAREN GREATER exp exp RPAREN .)
    $end            reduce using rule 23 (num_op -> LPAREN GREATER exp exp RPAREN .)
    RPAREN          reduce using rule 23 (num_op -> LPAREN GREATER exp exp RPAREN .)


state 89

    (24) num_op -> LPAREN SMALLER exp exp RPAREN .

    BOOL_VAL        reduce using rule 24 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    LPAREN          reduce using rule 24 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    NUMBER          reduce using rule 24 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    ID              reduce using rule 24 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    $end            reduce using rule 24 (num_op -> LPAREN SMALLER exp exp RPAREN .)
    RPAREN          reduce using rule 24 (num_op -> LPAREN SMALLER exp exp RPAREN .)


state 90

    (35) fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN . fun_body RPAREN
    (39) fun_body -> . exp
    (9) exp -> . BOOL_VAL
    (10) exp -> . number
    (11) exp -> . variable
    (12) exp -> . num_op
    (13) exp -> . logical_op
    (14) exp -> . fun_exp
    (15) exp -> . fun_call
    (16) exp -> . if_exp
    (17) number -> . NUMBER
    (32) variable -> . ID
    (18) num_op -> . LPAREN PLUS exp_list RPAREN
    (19) num_op -> . LPAREN MINUS exp exp RPAREN
    (20) num_op -> . LPAREN MULTIPLY exp_list RPAREN
    (21) num_op -> . LPAREN DIVIDE exp exp RPAREN
    (22) num_op -> . LPAREN MOD exp exp RPAREN
    (23) num_op -> . LPAREN GREATER exp exp RPAREN
    (24) num_op -> . LPAREN SMALLER exp exp RPAREN
    (25) num_op -> . LPAREN EQUAL exp_list RPAREN
    (26) logical_op -> . LPAREN AND exp_list RPAREN
    (27) logical_op -> . LPAREN OR exp_list RPAREN
    (28) logical_op -> . LPAREN NOT exp RPAREN
    (35) fun_exp -> . LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN
    (33) fun_call -> . LPAREN fun_exp param_list RPAREN
    (34) fun_call -> . LPAREN ID param_list RPAREN
    (43) if_exp -> . LPAREN IF test_exp then_exp else_exp RPAREN

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 39

    fun_body                       shift and go to state 94
    exp                            shift and go to state 95
    number                         shift and go to state 8
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14

state 91

    (37) fun_ids -> fun_ids ID .

    RPAREN          reduce using rule 37 (fun_ids -> fun_ids ID .)
    ID              reduce using rule 37 (fun_ids -> fun_ids ID .)


state 92

    (43) if_exp -> LPAREN IF test_exp then_exp else_exp . RPAREN

    RPAREN          shift and go to state 96


state 93

    (46) else_exp -> exp .

    RPAREN          reduce using rule 46 (else_exp -> exp .)


state 94

    (35) fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body . RPAREN

    RPAREN          shift and go to state 97


state 95

    (39) fun_body -> exp .

    RPAREN          reduce using rule 39 (fun_body -> exp .)


state 96

    (43) if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .

    BOOL_VAL        reduce using rule 43 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    LPAREN          reduce using rule 43 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    NUMBER          reduce using rule 43 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    ID              reduce using rule 43 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    $end            reduce using rule 43 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)
    RPAREN          reduce using rule 43 (if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN .)


state 97

    (35) fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .

    BOOL_VAL        reduce using rule 35 (fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .)
    LPAREN          reduce using rule 35 (fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .)
    NUMBER          reduce using rule 35 (fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .)
    ID              reduce using rule 35 (fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .)
    $end            reduce using rule 35 (fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .)
    RPAREN          reduce using rule 35 (fun_exp -> LPAREN FUN LPAREN fun_ids RPAREN fun_body RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BOOL_VAL in state 21 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 21 resolved as shift
WARNING: shift/reduce conflict for ID in state 21 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 21 resolved as shift
WARNING: shift/reduce conflict for BOOL_VAL in state 36 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
