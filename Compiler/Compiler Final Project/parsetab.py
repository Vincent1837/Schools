
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND DEFINE DIVIDE EQUAL FALSE FUN GREATER ID IF LPAREN MINUS MOD MULTIPLY NOT NUMBER OR PLUS PRINT_BOOL PRINT_NUM RPAREN SMALLER TRUEprogram : stmt_liststmt_list : stmt\n                 | stmt_list stmtstmt : exp\n            | def_stmt\n            | print_stmtprint_stmt : LPAREN PRINT_NUM exp RPAREN\n                  | LPAREN PRINT_BOOL exp RPARENexp : bool_val\n           | number\n           | VARIABLE\n           | num_op\n           | logical_op\n           | fun_exp\n           | fun_call\n           | if_expbool_val : TRUE\n                | FALSEnumber : NUMBERnum_op : LPAREN PLUS exp_list RPAREN\n              | LPAREN MINUS exp exp RPAREN\n              | LPAREN MULTIPLY exp_list RPAREN\n              | LPAREN DIVIDE exp exp RPAREN\n              | LPAREN MOD exp exp RPAREN\n              | LPAREN GREATER exp exp RPAREN\n              | LPAREN SMALLER exp exp RPAREN\n              | LPAREN EQUAL exp_list RPARENlogical_op : LPAREN AND exp_list RPAREN\n                  | LPAREN OR exp_list RPAREN\n                  | LPAREN NOT exp RPARENexp_list : exp\n                | exp_list expdef_stmt : LPAREN DEFINE VARIABLE exp RPARENVARIABLE : IDfun_exp : LPAREN FUN fun_ids fun_body RPARENfun_ids : VARIABLE\n               | fun_ids VARIABLE\n               | emptyfun_body : expfun_call : LPAREN fun_exp param_list RPAREN\n                | LPAREN fun_name param_list RPARENfun_name : IDparam_list : exp\n                  | param_list expif_exp : LPAREN IF test_exp then_exp else_exp RPARENtest_exp : expthen_exp : expelse_exp : expempty :'
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,71,76,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,97,],[15,15,-2,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-16,21,-17,-18,-19,-34,-3,42,42,42,42,42,42,42,42,42,42,42,42,42,-49,42,42,42,-42,42,21,42,-31,42,42,42,42,42,42,42,42,42,42,-36,-38,42,-43,42,42,-46,-7,-8,-20,-32,-22,-27,-28,-29,-30,-37,-40,-44,-41,42,-47,-33,-21,-23,-24,-25,-26,-35,-45,]),'TRUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,71,76,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,97,],[16,16,-2,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-34,-3,16,16,16,16,16,16,16,16,16,16,16,16,16,-49,16,16,16,-42,16,16,-31,16,16,16,16,16,16,16,16,16,16,-36,-38,16,-43,16,16,-46,-7,-8,-20,-32,-22,-27,-28,-29,-30,-37,-40,-44,-41,16,-47,-33,-21,-23,-24,-25,-26,-35,-45,]),'FALSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,71,76,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,97,],[17,17,-2,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-34,-3,17,17,17,17,17,17,17,17,17,17,17,17,17,-49,17,17,17,-42,17,17,-31,17,17,17,17,17,17,17,17,17,17,-36,-38,17,-43,17,17,-46,-7,-8,-20,-32,-22,-27,-28,-29,-30,-37,-40,-44,-41,17,-47,-33,-21,-23,-24,-25,-26,-35,-45,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,71,76,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,97,],[18,18,-2,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-34,-3,18,18,18,18,18,18,18,18,18,18,18,18,18,-49,18,18,18,-42,18,18,-31,18,18,18,18,18,18,18,18,18,18,-36,-38,18,-43,18,18,-46,-7,-8,-20,-32,-22,-27,-28,-29,-30,-37,-40,-44,-41,18,-47,-33,-21,-23,-24,-25,-26,-35,-45,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,71,76,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,97,],[19,19,-2,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-16,40,-17,-18,-19,-34,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-42,19,40,19,-31,19,19,19,19,19,19,19,19,19,19,-36,-38,19,-43,19,19,-46,-7,-8,-20,-32,-22,-27,-28,-29,-30,-37,-40,-44,-41,19,-47,-33,-21,-23,-24,-25,-26,-35,-45,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,66,67,68,71,76,77,78,79,83,85,88,89,90,91,92,93,94,97,],[0,-1,-2,-4,-5,-6,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-34,-3,-7,-8,-20,-22,-27,-28,-29,-30,-40,-41,-33,-21,-23,-24,-25,-26,-35,-45,]),'RPAREN':([7,8,9,10,11,12,13,14,16,17,18,19,43,44,45,46,48,53,54,55,56,60,61,62,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,89,90,91,92,93,94,95,96,97,],[-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-34,66,67,68,-31,71,76,77,78,79,83,-43,85,88,-20,-32,89,-22,90,91,92,93,-27,-28,-29,-30,94,-11,-39,-40,-44,-41,-21,-23,-24,-25,-26,-35,97,-48,-45,]),'DEFINE':([15,],[22,]),'PRINT_NUM':([15,],[23,]),'PRINT_BOOL':([15,],[24,]),'PLUS':([15,42,],[25,25,]),'MINUS':([15,42,],[26,26,]),'MULTIPLY':([15,42,],[27,27,]),'DIVIDE':([15,42,],[28,28,]),'MOD':([15,42,],[29,29,]),'GREATER':([15,42,],[30,30,]),'SMALLER':([15,42,],[31,31,]),'EQUAL':([15,42,],[32,32,]),'AND':([15,42,],[33,33,]),'OR':([15,42,],[34,34,]),'NOT':([15,42,],[35,35,]),'FUN':([15,21,42,],[36,36,36,]),'IF':([15,42,],[39,39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,],[2,]),'stmt':([0,2,],[3,20,]),'exp':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[4,4,43,44,46,47,46,49,50,51,52,46,46,46,56,61,61,64,65,69,70,69,72,73,74,75,69,69,69,82,84,84,87,96,]),'def_stmt':([0,2,],[5,5,]),'print_stmt':([0,2,],[6,6,]),'bool_val':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'number':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'VARIABLE':([0,2,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[9,9,41,9,9,9,9,9,9,9,9,9,9,9,9,9,58,9,9,9,9,9,9,9,9,9,9,9,9,9,9,81,9,9,9,9,]),'num_op':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'logical_op':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'fun_exp':([0,2,15,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,42,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[12,12,37,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,37,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'fun_call':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'if_exp':([0,2,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,41,45,47,48,49,50,51,52,53,54,55,57,60,62,63,86,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'fun_name':([15,42,],[38,38,]),'exp_list':([25,27,32,33,34,],[45,48,53,54,55,]),'fun_ids':([36,],[57,]),'empty':([36,],[59,]),'param_list':([37,38,],[60,62,]),'test_exp':([39,],[63,]),'fun_body':([57,],[80,]),'then_exp':([63,],[86,]),'else_exp':([86,],[95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',9),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser.py',13),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser.py',14),
  ('stmt -> exp','stmt',1,'p_stmt','parser.py',18),
  ('stmt -> def_stmt','stmt',1,'p_stmt','parser.py',19),
  ('stmt -> print_stmt','stmt',1,'p_stmt','parser.py',20),
  ('print_stmt -> LPAREN PRINT_NUM exp RPAREN','print_stmt',4,'p_print_stmt','parser.py',24),
  ('print_stmt -> LPAREN PRINT_BOOL exp RPAREN','print_stmt',4,'p_print_stmt','parser.py',25),
  ('exp -> bool_val','exp',1,'p_exp','parser.py',32),
  ('exp -> number','exp',1,'p_exp','parser.py',33),
  ('exp -> VARIABLE','exp',1,'p_exp','parser.py',34),
  ('exp -> num_op','exp',1,'p_exp','parser.py',35),
  ('exp -> logical_op','exp',1,'p_exp','parser.py',36),
  ('exp -> fun_exp','exp',1,'p_exp','parser.py',37),
  ('exp -> fun_call','exp',1,'p_exp','parser.py',38),
  ('exp -> if_exp','exp',1,'p_exp','parser.py',39),
  ('bool_val -> TRUE','bool_val',1,'p_bool_val','parser.py',43),
  ('bool_val -> FALSE','bool_val',1,'p_bool_val','parser.py',44),
  ('number -> NUMBER','number',1,'p_number','parser.py',48),
  ('num_op -> LPAREN PLUS exp_list RPAREN','num_op',4,'p_num_op','parser.py',52),
  ('num_op -> LPAREN MINUS exp exp RPAREN','num_op',5,'p_num_op','parser.py',53),
  ('num_op -> LPAREN MULTIPLY exp_list RPAREN','num_op',4,'p_num_op','parser.py',54),
  ('num_op -> LPAREN DIVIDE exp exp RPAREN','num_op',5,'p_num_op','parser.py',55),
  ('num_op -> LPAREN MOD exp exp RPAREN','num_op',5,'p_num_op','parser.py',56),
  ('num_op -> LPAREN GREATER exp exp RPAREN','num_op',5,'p_num_op','parser.py',57),
  ('num_op -> LPAREN SMALLER exp exp RPAREN','num_op',5,'p_num_op','parser.py',58),
  ('num_op -> LPAREN EQUAL exp_list RPAREN','num_op',4,'p_num_op','parser.py',59),
  ('logical_op -> LPAREN AND exp_list RPAREN','logical_op',4,'p_logical_op','parser.py',80),
  ('logical_op -> LPAREN OR exp_list RPAREN','logical_op',4,'p_logical_op','parser.py',81),
  ('logical_op -> LPAREN NOT exp RPAREN','logical_op',4,'p_logical_op','parser.py',82),
  ('exp_list -> exp','exp_list',1,'p_exp_list','parser.py',91),
  ('exp_list -> exp_list exp','exp_list',2,'p_exp_list','parser.py',92),
  ('def_stmt -> LPAREN DEFINE VARIABLE exp RPAREN','def_stmt',5,'p_def_stmt','parser.py',96),
  ('VARIABLE -> ID','VARIABLE',1,'p_variable','parser.py',101),
  ('fun_exp -> LPAREN FUN fun_ids fun_body RPAREN','fun_exp',5,'p_fun_exp','parser.py',108),
  ('fun_ids -> VARIABLE','fun_ids',1,'p_fun_ids','parser.py',112),
  ('fun_ids -> fun_ids VARIABLE','fun_ids',2,'p_fun_ids','parser.py',113),
  ('fun_ids -> empty','fun_ids',1,'p_fun_ids','parser.py',114),
  ('fun_body -> exp','fun_body',1,'p_fun_body','parser.py',118),
  ('fun_call -> LPAREN fun_exp param_list RPAREN','fun_call',4,'p_fun_call','parser.py',122),
  ('fun_call -> LPAREN fun_name param_list RPAREN','fun_call',4,'p_fun_call','parser.py',123),
  ('fun_name -> ID','fun_name',1,'p_fun_name','parser.py',139),
  ('param_list -> exp','param_list',1,'p_param_list','parser.py',143),
  ('param_list -> param_list exp','param_list',2,'p_param_list','parser.py',144),
  ('if_exp -> LPAREN IF test_exp then_exp else_exp RPAREN','if_exp',6,'p_if_exp','parser.py',148),
  ('test_exp -> exp','test_exp',1,'p_test_exp','parser.py',152),
  ('then_exp -> exp','then_exp',1,'p_then_exp','parser.py',156),
  ('else_exp -> exp','else_exp',1,'p_else_exp','parser.py',160),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',164),
]
